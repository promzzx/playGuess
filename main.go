package main

import (
	"encoding/json"
	"fmt"
	color "github.com/fatih/color"
	"math/rand"
	"os"
	"time"
)

var (
	win  = color.New(color.FgGreen, color.Bold).PrintfFunc()
	lose = color.New(color.FgRed, color.Bold).PrintfFunc()
	warn = color.New(color.FgYellow).PrintfFunc()
	attS = color.New(color.FgYellow).SprintFunc()
	info = color.New(color.FgCyan).PrintfFunc()
)

type Level struct {
	name       string
	maxNumber  int
	maxAttempt int
}

type Result struct {
	Date     string `json:"data"`
	Result   string `json:"result"`
	Attempts int    `json:"attempts"`
	Level    string `json:"level"`
}

func inArray(arr []int, x int) bool {
	for _, n := range arr {
		if n == x {
			return true
		}
	}
	return false
}

func enterLevel() int {
	fmt.Printf("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n1 - Easy: 1‚Äì50, 15 –ø–æ–ø—ã—Ç–æ–∫\n2 - Medium: 1‚Äì100, 10 –ø–æ–ø—ã—Ç–æ–∫\n3 - Hard: 1‚Äì200, 5 –ø–æ–ø—ã—Ç–æ–∫\n–¢–≤–æ–π –≤—ã–±–æ—Ä: ")

	var choice int

	if _, err := fmt.Scan(&choice); err != nil || choice > 3 || choice < 1 {
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
		var discard string
		fmt.Scanln(&discard)
		return enterLevel()
	}

	return choice
}

func switchLevel(choice int) (Level, bool) {
	switch choice {
	case 1:
		return Level{"Easy", 50, 15}, true
	case 2:
		return Level{"Medium", 100, 10}, true
	case 3:
		return Level{"Hard", 200, 5}, true
	default:
		return Level{}, false
	}
}

func readGuess() int {
	for {
		var x int
		if _, err := fmt.Scan(&x); err != nil {
			fmt.Printf("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!\n")
			var discard string
			fmt.Scanln(&discard)
			continue
		}
		return x
	}
}

func playGuess(lvl Level) {
	number := rand.Intn(lvl.maxNumber) + 1
	var user_number int
	var user_attemps []int
	var count int

	info("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ %d, –∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–≥–∞–¥–∞–ª\n", lvl.maxNumber)

	for count = 1; count <= lvl.maxAttempt; {
		if user_attemps != nil {
			fmt.Println("–ü–æ–ø—ã—Ç–∫–∏:", attS(fmt.Sprint(user_attemps)))
		}

		fmt.Printf("%d –ø–æ–ø—ã—Ç–∫–∞: ", count)
		user_number = readGuess()

		if inArray(user_attemps, user_number) {
			fmt.Println("–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ")
			continue
		}
		if user_number <= 0 || user_number > lvl.maxNumber {
			fmt.Printf("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ!\n")
			continue
		}

		count++
		diff := absInt(user_number - number)
		switch {
		case user_number > number:
			fmt.Printf("–ß–∏—Å–ª–æ %s –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ\n", attS("–±–æ–ª—å—à–µ"))
			switchDiff(diff)
			user_attemps = append(user_attemps, user_number)
			continue
		case user_number < number:
			fmt.Printf("–ß–∏—Å–ª–æ %s –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ\n", attS("–º–µ–Ω—å—à–µ"))
			switchDiff(diff)
			user_attemps = append(user_attemps, user_number)
			continue
		default:
			number = -1
			win("–í—ã —É–≥–∞–¥–∞–ª–∏\n")
			saveResult(Result{Date: time.Now().Format("15:04:05 02-01-2006"), Result: "WIN", Attempts: count, Level: lvl.name})
			return
		}

	}
	if count == lvl.maxAttempt+1 && number > 0 {
		lose("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: %d\n", number)
		saveResult(Result{Date: time.Now().Format("15:04:05 02-01-2006"), Result: "LOSE", Attempts: count - 1, Level: lvl.name})
	}
}

func absInt(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

func switchDiff(diff int) {
	switch {
	case diff <= 5:
		warn(" üî• –ì–æ—Ä—è—á–æ \n")
	case diff <= 15:
		info("üôÇ –¢–µ–ø–ª–æ \n")
	case diff > 15:
		fmt.Printf("‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ \n")
	}
	return
}

func saveResult(r Result) {
	const filename = "result.json"

	var results []Result

	if data, err := os.ReadFile(filename); err == nil && len(data) > 0 {
		json.Unmarshal(data, &results)
	}

	results = append(results, r)

	jsonData, _ := json.MarshalIndent(results, "", "	")
	os.WriteFile(filename, jsonData, 0665)
}

func nextAction() int {
	fmt.Printf("\n–°—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ?\n1 - –°—ã–≥—Ä–∞—Ç—å –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n2 - –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n3 - –í—ã—Ö–æ–¥\n")
	var choice int
	if _, err := fmt.Scan(&choice); err != nil || choice > 3 || choice < 1 {
		fmt.Printf("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3!\n")
		var discard string
		fmt.Scanln(&discard)
		return nextAction()
	}
	return choice
}

func main() {
	var lvl Level
	var ok bool
	var needLevel bool = true
	for {
		if needLevel {
			lvl, ok = switchLevel(enterLevel())
		}
		if ok {
			playGuess(lvl)
		}

		action := nextAction()
		switch action {
		case 1:
			needLevel = false
			continue
		case 2:
			needLevel = true
			continue
		case 3:
			fmt.Println("–ü–æ–∫–∞!")
			return
		}
	}
}
